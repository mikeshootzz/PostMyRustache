name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Set up test environment
      run: |
        echo "DB_HOST=localhost" >> $GITHUB_ENV
        echo "DB_USER=postgres" >> $GITHUB_ENV
        echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "MYSQL_USERNAME=admin" >> $GITHUB_ENV
        echo "MYSQL_PASSWORD=password" >> $GITHUB_ENV
        echo "BIND_ADDRESS=0.0.0.0:3306" >> $GITHUB_ENV
        echo "RUST_LOG=info" >> $GITHUB_ENV

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose -- --test-threads=1

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            rust_target: aarch64-apple-darwin
            asset_name: postmyrustache-macos-arm64.zip
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
            asset_name: postmyrustache-linux-x86_64.zip
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            asset_name: postmyrustache-windows-x86_64.zip

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.rust_target }}
          override: true

      - name: Install Visual Studio Build Tools for Windows
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build binary
        run: cargo build --target ${{ matrix.rust_target }} --release

      - name: Archive production artifacts
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "x86_64-pc-windows-msvc" ]]; then
            7z a ${{ matrix.asset_name }} target/${{ matrix.rust_target }}/release/postmyrustache.exe
          else
            zip ${{ matrix.asset_name }} target/${{ matrix.rust_target }}/release/postmyrustache
          fi

      - name: Upload artifact for release
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Debug - List files in the directory
        run: ls -la && cd postmyrustache-linux-x86_64.zip && ls -la

      - name: Upload Release Asset macOS ARM64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./postmyrustache-macos-arm64.zip/postmyrustache-macos-arm64.zip
          asset_name: postmyrustache-macos-arm64.zip
          asset_content_type: application/zip

      - name: Upload Release Asset Linux x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./postmyrustache-linux-x86_64.zip/postmyrustache-linux-x86_64.zip
          asset_name: postmyrustache-linux-x86_64.zip
          asset_content_type: application/zip

      - name: Upload Release Asset Windows x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./postmyrustache-windows-x86_64.zip/postmyrustache-windows-x86_64.zip
          asset_name: postmyrustache-windows-x86_64.zip
          asset_content_type: application/zip
